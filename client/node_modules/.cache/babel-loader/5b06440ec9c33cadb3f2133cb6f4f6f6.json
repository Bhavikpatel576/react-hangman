{"ast":null,"code":"import _objectSpread from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/src/containers/game.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nvar url = 'http://app.linkedin-reach.io/words';\nvar path = '/api/words';\nvar param = '?difficulty=10';\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game(props) {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this, props));\n\n    _this.fetchWord = function () {\n      axios.get('/api/words' + param).then(function (response) {\n        return response.data.split(\"\\n\");\n      }).then(function (allWords) {\n        var word = allWords[Math.floor(allWords.length * Math.random())];\n        return word;\n      }).then(function (word) {\n        var wordHash = word.split(\"\").map(function (char) {\n          return {\n            character: char,\n            guessed: false\n          };\n        });\n        console.log(wordHash);\n\n        _this.setState({\n          currentWord: wordHash,\n          loading: false\n        });\n      });\n    };\n\n    _this.handleClick = function (char, e) {\n      var bool = _this.state.currentWord.includes(char);\n\n      if (bool) {\n        var characters = _this.state.currentWord.map(function (curWord) {\n          if (curWord.character === char) {\n            return _objectSpread({}, curWord, {\n              guessed: true\n            });\n          }\n        });\n      }\n    };\n\n    _this.handleReset = function () {\n      _this.setState(_objectSpread({}, _this.baseState));\n    };\n\n    _this.loading = function () {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Loading..\");\n    };\n\n    _this.state = {\n      currentWord: \"\",\n      loading: true,\n      charactersPlayed: \"\",\n      charSlots: [],\n      correctlyGuessed: [],\n      incorrectlyGuessed: [],\n      numberOfGuesses: 6,\n      gameOver: false\n    };\n    _this.characters = \"abcdefghijklmnopqrstuvwxyz12367890\";\n    _this.baseState = _this.state;\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchWord();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.loading) {\n        return this.loading();\n      } else if (this.state.gameOver) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, \"The game is over\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, \" check winner\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, \" add button to restart game\"));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, \"Hangman Game\"));\n      }\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/src/containers/game.js"],"names":["React","Component","axios","url","path","param","Game","props","fetchWord","get","then","response","data","split","allWords","word","Math","floor","length","random","wordHash","map","char","character","guessed","console","log","setState","currentWord","loading","handleClick","e","bool","state","includes","characters","curWord","handleReset","baseState","charactersPlayed","charSlots","correctlyGuessed","incorrectlyGuessed","numberOfGuesses","gameOver"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios'\n\nconst url = 'http://app.linkedin-reach.io/words'\nconst path = '/api/words'\nconst param = '?difficulty=10'\n\nclass Game extends Component {       \n    constructor(props){\n        super(props)\n        this.state = {\n            currentWord: \"\",\n            loading: true,\n            charactersPlayed: \"\",\n            charSlots: [],\n            correctlyGuessed: [],\n            incorrectlyGuessed: [],\n            numberOfGuesses: 6,\n            gameOver: false\n        }\n        this.characters = \"abcdefghijklmnopqrstuvwxyz12367890\";\n        this.baseState = this.state;\n    }\n\n    fetchWord = () => {\n        axios.get('/api/words' + param)\n        .then(response => {\n          return response.data.split(\"\\n\")\n        })\n        .then(allWords => {\n          const word = allWords[Math.floor(allWords.length * Math.random())]\n          return word\n        })\n        .then((word) => {\n            const wordHash = word.split(\"\").map((char)=> ({character: char, guessed: false}))\n            console.log(wordHash);\n            this.setState({\n                currentWord: wordHash,\n                loading: false\n            })\n        })\n    }\n\n    componentDidMount(){\n        this.fetchWord();\n    }\n\n    handleClick = (char, e) => {\n        let bool = this.state.currentWord.includes(char);\n        if(bool){\n            let characters = this.state.currentWord.map((curWord)=>{\n                if (curWord.character === char) {\n                    return {...curWord, guessed: true}\n                }\n            })\n        }\n        \n    }\n\n    handleReset = () => {\n        this.setState({...this.baseState});\n    }\n\n    loading = () => (<div>Loading..</div>)\n\n\n    render(){\n        if (this.state.loading){\n            return this.loading()\n        } else if (this.state.gameOver){\n            return (\n                <div>\n                    <div>The game is over</div>\n                    <div> check winner</div>\n                    <div> add button to restart game</div>\n                </div>\n            )\n        } else { \n            return (\n                <div>\n                    <h1>Hangman Game</h1>\n                </div>\n            )\n        }\n    }\n}\n  \nexport default Game"]},"metadata":{},"sourceType":"module"}