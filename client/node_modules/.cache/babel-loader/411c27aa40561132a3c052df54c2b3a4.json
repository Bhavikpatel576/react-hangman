{"ast":null,"code":"import _objectSpread from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/src/containers/game.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Keyboard from '../components/keyboard';\nimport './game.css';\nvar url = 'http://app.linkedin-reach.io/words';\nvar path = '/api/words';\nvar param = '?difficulty=10';\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game(props) {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this, props));\n\n    _this.fetchWord = function () {\n      axios.get('/api/words' + param).then(function (response) {\n        return response.data.split(\"\\n\");\n      }).then(function (allWords) {\n        var word = allWords[Math.floor(allWords.length * Math.random())];\n        return word;\n      }).then(function (word) {\n        var wordHash = word.split(\"\").map(function (char) {\n          return {\n            character: char,\n            guessed: false\n          };\n        });\n\n        _this.setState({\n          currentWord: wordHash,\n          loading: false\n        });\n      });\n    };\n\n    _this.checkGameWon = function (guessedChars) {\n      return guessedChars.reduce(function (winState, currentObject) {\n        return winState && currentObject.guessed;\n      }, true);\n    };\n\n    _this.handleClick = function (char, e) {\n      var bool = _this.state.currentWord.includes(char);\n\n      if (bool) {\n        var currentWord = _this.state.currentWord.map(function (curWord) {\n          if (curWord.character === char) {\n            return _objectSpread({}, curWord, {\n              guessed: true\n            });\n          }\n\n          return curWord;\n        });\n\n        var gameWon = _this.checkGameWon(currentWord);\n\n        _this.setState(function (prevState) {\n          return {\n            currentWord: currentWord,\n            guessed: prevState.guessed.concat(char),\n            gameWon: gameWon\n          };\n        });\n      } else {\n        _this.setState(function (prevState, _) {\n          var numberOfGuesses = prevState.numberOfGuesses - 1;\n          var stateUpdate = {\n            numberOfGuesses: numberOfGuesses\n          };\n\n          if (numberOfGuesses === 0) {\n            stateUpdate.gameOver = true;\n          }\n\n          stateUpdate.guessed = [char].concat(prevState.guessed);\n          return stateUpdate;\n        });\n      }\n    };\n\n    _this.handleReset = function () {\n      _this.setState(_objectSpread({}, _this.baseState));\n    };\n\n    _this.loading = function () {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Loading..\");\n    };\n\n    _this.state = {\n      currentWord: \"\",\n      loading: true,\n      charactersPlayed: \"\",\n      charSlots: [],\n      guessed: [],\n      correctlyGuessed: [],\n      incorrectlyGuessed: [],\n      numberOfGuesses: 6,\n      gameOver: false\n    };\n    _this.characters = \"abcdefghijklmnopqrstuvwxyz12367890\";\n    _this.baseState = _this.state;\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchWord();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.loading) {\n        return this.loading();\n      } else if (this.state.gameOver) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, \"The game is over\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, \" check winner\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, \" add button to restart game\"));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"Game\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, \"Hangman Game\"), React.createElement(Keyboard, {\n          guesses: this.state.guessed,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }));\n      }\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/src/containers/game.js"],"names":["React","Component","axios","Keyboard","url","path","param","Game","props","fetchWord","get","then","response","data","split","allWords","word","Math","floor","length","random","wordHash","map","char","character","guessed","setState","currentWord","loading","checkGameWon","guessedChars","reduce","winState","currentObject","handleClick","e","bool","state","includes","curWord","gameWon","prevState","concat","_","numberOfGuesses","stateUpdate","gameOver","handleReset","baseState","charactersPlayed","charSlots","correctlyGuessed","incorrectlyGuessed","characters"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAO,YAAP;AAEA,IAAMC,GAAG,GAAG,oCAAZ;AACA,IAAMC,IAAI,GAAG,YAAb;AACA,IAAMC,KAAK,GAAG,gBAAd;;IAEMC,I;;;;;AACF,gBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,8EAAMA,KAAN;;AADc,UAiBlBC,SAjBkB,GAiBN,YAAM;AACdP,MAAAA,KAAK,CAACQ,GAAN,CAAU,eAAeJ,KAAzB,EACCK,IADD,CACM,UAAAC,QAAQ,EAAI;AAChB,eAAOA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoB,IAApB,CAAP;AACD,OAHD,EAICH,IAJD,CAIM,UAAAI,QAAQ,EAAI;AAChB,YAAMC,IAAI,GAAGD,QAAQ,CAACE,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACI,MAAT,GAAkBF,IAAI,CAACG,MAAL,EAA7B,CAAD,CAArB;AACA,eAAOJ,IAAP;AACD,OAPD,EAQCL,IARD,CAQM,UAACK,IAAD,EAAU;AACZ,YAAMK,QAAQ,GAAGL,IAAI,CAACF,KAAL,CAAW,EAAX,EAAeQ,GAAf,CAAmB,UAACC,IAAD;AAAA,iBAAU;AAACC,YAAAA,SAAS,EAAED,IAAZ;AAAkBE,YAAAA,OAAO,EAAE;AAA3B,WAAV;AAAA,SAAnB,CAAjB;;AACA,cAAKC,QAAL,CAAc;AACVC,UAAAA,WAAW,EAAEN,QADH;AAEVO,UAAAA,OAAO,EAAE;AAFC,SAAd;AAIH,OAdD;AAeH,KAjCiB;;AAAA,UAuClBC,YAvCkB,GAuCH,UAACC,YAAD,EAAkB;AAC7B,aAAOA,YAAY,CAACC,MAAb,CAAoB,UAACC,QAAD,EAAWC,aAAX,EAA6B;AACpD,eAAOD,QAAQ,IAAIC,aAAa,CAACR,OAAjC;AACD,OAFI,EAEF,IAFE,CAAP;AAGH,KA3CiB;;AAAA,UA6ClBS,WA7CkB,GA6CJ,UAACX,IAAD,EAAOY,CAAP,EAAa;AACvB,UAAIC,IAAI,GAAG,MAAKC,KAAL,CAAWV,WAAX,CAAuBW,QAAvB,CAAgCf,IAAhC,CAAX;;AACA,UAAGa,IAAH,EAAQ;AACJ,YAAIT,WAAW,GAAG,MAAKU,KAAL,CAAWV,WAAX,CAAuBL,GAAvB,CAA2B,UAACiB,OAAD,EAAW;AACpD,cAAIA,OAAO,CAACf,SAAR,KAAsBD,IAA1B,EAAgC;AAC5B,qCAAWgB,OAAX;AAAoBd,cAAAA,OAAO,EAAE;AAA7B;AACH;;AACD,iBAAOc,OAAP;AACH,SALiB,CAAlB;;AAOA,YAAIC,OAAO,GAAG,MAAKX,YAAL,CAAkBF,WAAlB,CAAd;;AAEA,cAAKD,QAAL,CAAc,UAACe,SAAD,EAAe;AACzB,iBAAO;AACHd,YAAAA,WAAW,EAAXA,WADG;AAEHF,YAAAA,OAAO,EAAEgB,SAAS,CAAChB,OAAV,CAAkBiB,MAAlB,CAAyBnB,IAAzB,CAFN;AAGHiB,YAAAA,OAAO,EAAEA;AAHN,WAAP;AAKH,SAND;AAOH,OAjBD,MAiBO;AACH,cAAKd,QAAL,CAAc,UAACe,SAAD,EAAYE,CAAZ,EAAkB;AAChC,cAAMC,eAAe,GAAGH,SAAS,CAACG,eAAV,GAA4B,CAApD;AACA,cAAIC,WAAW,GAAG;AACdD,YAAAA,eAAe,EAAEA;AADH,WAAlB;;AAGA,cAAIA,eAAe,KAAK,CAAxB,EAA2B;AACvBC,YAAAA,WAAW,CAACC,QAAZ,GAAuB,IAAvB;AACH;;AACDD,UAAAA,WAAW,CAACpB,OAAZ,GAAsB,CAACF,IAAD,EAAOmB,MAAP,CAAcD,SAAS,CAAChB,OAAxB,CAAtB;AACA,iBAAOoB,WAAP;AACH,SAVG;AAWH;AACJ,KA7EiB;;AAAA,UA+ElBE,WA/EkB,GA+EJ,YAAM;AAChB,YAAKrB,QAAL,mBAAkB,MAAKsB,SAAvB;AACH,KAjFiB;;AAAA,UAmFlBpB,OAnFkB,GAmFR;AAAA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AAAA,KAnFQ;;AAEd,UAAKS,KAAL,GAAa;AACTV,MAAAA,WAAW,EAAE,EADJ;AAETC,MAAAA,OAAO,EAAE,IAFA;AAGTqB,MAAAA,gBAAgB,EAAE,EAHT;AAITC,MAAAA,SAAS,EAAE,EAJF;AAKTzB,MAAAA,OAAO,EAAE,EALA;AAMT0B,MAAAA,gBAAgB,EAAE,EANT;AAOTC,MAAAA,kBAAkB,EAAE,EAPX;AAQTR,MAAAA,eAAe,EAAE,CARR;AASTE,MAAAA,QAAQ,EAAE;AATD,KAAb;AAWA,UAAKO,UAAL,GAAkB,oCAAlB;AACA,UAAKL,SAAL,GAAiB,MAAKX,KAAtB;AAdc;AAejB;;;;wCAoBkB;AACf,WAAK5B,SAAL;AACH;;;6BAiDO;AACJ,UAAI,KAAK4B,KAAL,CAAWT,OAAf,EAAuB;AACnB,eAAO,KAAKA,OAAL,EAAP;AACH,OAFD,MAEO,IAAI,KAAKS,KAAL,CAAWS,QAAf,EAAwB;AAC3B,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAHJ,CADJ;AAOH,OARM,MAQA;AACH,eACI;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,EAEI,oBAAC,QAAD;AACI,UAAA,OAAO,EAAE,KAAKT,KAAL,CAAWZ,OADxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,CADJ;AAQH;AACJ;;;;EA5GcxB,S;;AA+GnB,eAAeM,IAAf","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios'\nimport Keyboard from '../components/keyboard'\nimport './game.css'\n\nconst url = 'http://app.linkedin-reach.io/words'\nconst path = '/api/words'\nconst param = '?difficulty=10'\n\nclass Game extends Component {       \n    constructor(props){\n        super(props)\n        this.state = {\n            currentWord: \"\",\n            loading: true,\n            charactersPlayed: \"\",\n            charSlots: [],\n            guessed: [],\n            correctlyGuessed: [],\n            incorrectlyGuessed: [],\n            numberOfGuesses: 6,\n            gameOver: false\n        }\n        this.characters = \"abcdefghijklmnopqrstuvwxyz12367890\";\n        this.baseState = this.state;\n    }\n\n    fetchWord = () => {\n        axios.get('/api/words' + param)\n        .then(response => {\n          return response.data.split(\"\\n\")\n        })\n        .then(allWords => {\n          const word = allWords[Math.floor(allWords.length * Math.random())]\n          return word\n        })\n        .then((word) => {\n            const wordHash = word.split(\"\").map((char)=> ({character: char, guessed: false}))\n            this.setState({\n                currentWord: wordHash,\n                loading: false\n            })\n        })\n    }\n\n    componentDidMount(){\n        this.fetchWord();\n    }\n\n    checkGameWon = (guessedChars) => {\n        return guessedChars.reduce((winState, currentObject) => {\n            return winState && currentObject.guessed;\n          }, true);\n    }\n\n    handleClick = (char, e) => {\n        let bool = this.state.currentWord.includes(char);\n        if(bool){\n            let currentWord = this.state.currentWord.map((curWord)=>{\n                if (curWord.character === char) {\n                    return {...curWord, guessed: true}\n                }\n                return curWord;\n            })\n\n            let gameWon = this.checkGameWon(currentWord);\n\n            this.setState((prevState) => {\n                return {\n                    currentWord, \n                    guessed: prevState.guessed.concat(char),\n                    gameWon: gameWon\n                }\n            })\n        } else {\n            this.setState((prevState, _) => {\n            const numberOfGuesses = prevState.numberOfGuesses - 1;\n            let stateUpdate = {\n                numberOfGuesses: numberOfGuesses,\n            };\n            if (numberOfGuesses === 0) {\n                stateUpdate.gameOver = true;\n            }\n            stateUpdate.guessed = [char].concat(prevState.guessed);\n            return stateUpdate;\n        })\n        }\n    }\n\n    handleReset = () => {\n        this.setState({...this.baseState});\n    }\n\n    loading = () => (<div>Loading..</div>)\n\n\n    render(){\n        if (this.state.loading){\n            return this.loading()\n        } else if (this.state.gameOver){\n            return (\n                <div>\n                    <div>The game is over</div>\n                    <div> check winner</div>\n                    <div> add button to restart game</div>\n                </div>\n            )\n        } else { \n            return (\n                <div className=\"Game\">\n                    <h1>Hangman Game</h1>\n                    <Keyboard\n                        guesses={this.state.guessed}\n                    />\n                </div>\n            )\n        }\n    }\n}\n  \nexport default Game"]},"metadata":{},"sourceType":"module"}