{"ast":null,"code":"import _classCallCheck from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/src/containers/game.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport SecretWord from '../components/secret'; // import SelectCharacters from '../components/characters'\n\nimport { startGame as _startGame, guessCharacter } from '../actions/game';\nvar url = 'http://app.linkedin-reach.io/words';\nvar path = '/api/words';\nvar param = '?difficulty=10';\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game(props) {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this, props));\n\n    _this.fetchWord = function () {\n      axios.get('/api/words' + param).then(function (response) {\n        return response.data.split(\"\\n\");\n      }).then(function (allWords) {\n        var word = allWords[Math.floor(allWords.length * Math.random())];\n        return word;\n      }).then(function (word) {\n        console.log(word);\n\n        _this.setState({\n          currentWord: word,\n          loading: false\n        });\n      });\n    };\n\n    _this.checkCharacter = function (char) {\n      if (_this.state.numberOfGuesses > 0) {\n        if (_this.state.incorrectlyGuessed.includes(char) || _this.state.correctlyGuessed.includes(char)) {\n          return alert(\"You've already used the character: \".concat(char));\n        } else if (_this.state.currentWord.includes(char)) {\n          _this.state.correctlyGuessed.push(char);\n        }\n      } else {\n        _this.setState({\n          gameOver: true\n        });\n      }\n    };\n\n    _this.createCharacters = function () {\n      return _this.characters.split(\"\").map(function (char) {\n        return React.createElement(\"button\", {\n          id: char,\n          key: char,\n          onClick: function onClick() {\n            return _this.checkCharacter(char);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, char);\n      });\n    };\n\n    _this.updateWordSlot = function (char) {\n      _this.currentWord.split(\"\").forEach(function (el, idx) {\n        if (el === char) {\n          _this.state.wordSlot;\n        }\n      });\n    };\n\n    _this.createWordSlot = function () {\n      var charSlots = _this.state.currentWord.split(\"\").map(function (el) {\n        return \"_\";\n      });\n\n      _this.setState({\n        charSlot: charSlots\n      });\n    };\n\n    _this.state = {\n      currentWord: \"\",\n      loading: true,\n      charactersPlayed: \"\",\n      correctlyGuessed: [],\n      incorrectlyGuessed: [],\n      numberOfGuesses: 6,\n      gameOver: false\n    };\n    _this.characters = \"abcdefghijklmnopqrstuvwxyz12367890\";\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchWord();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.loading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, \"Loading ...\");\n      } else if (this.state.gameOver) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, \"The game is over\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, \" check winner\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, \" add button to restart game\"));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, \"Hangman Game\"), React.createElement(\"ul\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, this.state.currentWord)), React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, this.state.charSlot.join(\"\"))), React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, this.props.guessedCharacters))), this.createCharacters());\n      }\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    gameNumber: store.gameNumber\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    startGame: function startGame(text) {\n      dispatch(_startGame(text));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/src/containers/game.js"],"names":["React","Component","connect","axios","SecretWord","startGame","guessCharacter","url","path","param","Game","props","fetchWord","get","then","response","data","split","allWords","word","Math","floor","length","random","console","log","setState","currentWord","loading","checkCharacter","char","state","numberOfGuesses","incorrectlyGuessed","includes","correctlyGuessed","alert","push","gameOver","createCharacters","characters","map","updateWordSlot","forEach","el","idx","wordSlot","createWordSlot","charSlots","charSlot","charactersPlayed","join","guessedCharacters","mapStateToProps","store","gameNumber","mapDispatchToProps","dispatch","text"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios'\nimport SecretWord from '../components/secret';\n// import SelectCharacters from '../components/characters'\nimport {startGame, guessCharacter} from '../actions/game';\n\nconst url = 'http://app.linkedin-reach.io/words'\nconst path = '/api/words'\nconst param = '?difficulty=10'\n\nclass Game extends Component {       \n    constructor(props){\n        super(props)\n        this.state = {\n            currentWord: \"\",\n            loading: true,\n            charactersPlayed: \"\",\n            correctlyGuessed: [],\n            incorrectlyGuessed: [],\n            numberOfGuesses: 6,\n            gameOver: false\n        }\n        this.characters = \"abcdefghijklmnopqrstuvwxyz12367890\"\n    }\n\n    fetchWord = () => {\n        axios.get('/api/words' + param)\n        .then(response => {\n          return response.data.split(\"\\n\")\n        })\n        .then(allWords => {\n          const word = allWords[Math.floor(allWords.length * Math.random())]\n          return word\n        })\n        .then((word) => {\n            console.log(word)\n            this.setState({\n                currentWord: word,\n                loading: false\n            })\n        })\n    }\n\n    componentDidMount(){\n        this.fetchWord();\n    }\n\n\n    checkCharacter = (char) => {\n        if (this.state.numberOfGuesses > 0) {\n            if (this.state.incorrectlyGuessed.includes(char) || this.state.correctlyGuessed.includes(char)){\n                return alert(`You've already used the character: ${char}`)\n            } else if (this.state.currentWord.includes(char)) {\n                this.state.correctlyGuessed.push(char)\n            }\n        } else {\n            this.setState({gameOver: true})\n        }\n\n    }\n\n    createCharacters = () => {\n        return this.characters.split(\"\").map((char)=> {\n            return (\n                <button id={char} key={char} onClick={() => this.checkCharacter(char)}>{char}</button>\n            )\n        })\n    }\n\n    updateWordSlot = (char) => {\n        this.currentWord.split(\"\").forEach((el, idx)=>{\n            if (el === char){\n                this.state.wordSlot\n            }\n        })\n    }\n\n    createWordSlot = () => {\n        var charSlots = this.state.currentWord.split(\"\").map((el) => \"_\")\n        this.setState({charSlot: charSlots})\n    }\n\n    render(){\n        if (this.state.loading){\n            return (\n                <div>\n                    Loading ...\n                </div>\n            )\n        } else if (this.state.gameOver){\n            return (\n                <div>\n                    <div>The game is over</div>\n                    <div> check winner</div>\n                    <div> add button to restart game</div>\n                </div>\n            )\n        } else { \n            return (\n                <div>\n                    <h1>Hangman Game</h1>\n                    <ul>\n                        <li>\n                            <p>{this.state.currentWord}</p>\n                        </li>\n                        <li>\n                            <p>{this.state.charSlot.join(\"\")}</p>\n                        </li>\n                        <li>\n                            <p>{this.props.guessedCharacters}</p>\n                        </li>\n                    </ul>\n                    {this.createCharacters()}\n                </div>\n            )\n        }\n    }\n}\n\n\n\nconst mapStateToProps = store => ({\n    gameNumber: store.gameNumber,\n})\n  \nconst mapDispatchToProps = (dispatch) => ({\n    startGame: (text) => {dispatch(startGame(text))}\n})\n  \nexport default connect(mapStateToProps,mapDispatchToProps)(Game)"]},"metadata":{},"sourceType":"module"}