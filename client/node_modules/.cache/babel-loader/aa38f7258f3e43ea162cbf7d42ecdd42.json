{"ast":null,"code":"import _objectSpread from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/src/containers/game.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Keyboard from '../components/keyboard';\nimport Hangman from '../components/hangman';\nimport Winner from '../components/winner';\nimport GameConsole from '../components/gameConsole';\nimport './game.css';\nvar url = 'http://app.linkedin-reach.io/words';\nvar path = '/api/words';\nvar param = '?difficulty=1';\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game(props) {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this, props));\n\n    _this.fetchWord = function () {\n      axios.get('/api/words' + param).then(function (response) {\n        return response.data.split(\"\\n\");\n      }).then(function (allWords) {\n        var word = allWords[Math.floor(allWords.length * Math.random())];\n        return word;\n      }).then(function (word) {\n        _this.setState({\n          currentWord: word,\n          loading: false\n        });\n      });\n    };\n\n    _this.checkCharacter = function (char) {\n      if (_this.state.guessed.indexOf(char) === -1) {\n        _this.setState(function (prevState) {\n          return {\n            guessed: prevState.guessed.concat(char)\n          };\n        });\n      }\n\n      if (_this.state.currentWord.includes(char)) {\n        _this.setState(function (prevState) {\n          return {\n            correctlyGuessed: prevState.correctlyGuessed.concat(char)\n          };\n        }, function () {\n          return _this.checkGameStatus();\n        });\n      } else {\n        _this.setState(function (prevState) {\n          return {\n            numberOfGuesses: prevState.numberOfGuesses - 1\n          };\n        }, function () {\n          return _this.checkGameStatus();\n        });\n      }\n    };\n\n    _this.checkGameStatus = function () {\n      if (_this.state.numberOfGuesses === 0) {\n        _this.gameOver('lose');\n      }\n\n      var characterList = _toConsumableArray(_this.state.currentWord).filter(function (value, index, self) {\n        return self.indexOf(value) === index;\n      });\n\n      if (characterList !== undefined) {\n        return characterList.sort().toString() === _this.state.correctlyGuessed.sort().toString() ? _this.gameOver('win') : null;\n      } else {\n        return null;\n      }\n    };\n\n    _this.gameOver = function (result) {\n      if (result === 'lose') {\n        _this.setState({\n          lose: true,\n          gameOver: true\n        });\n\n        _this.showRest();\n      } else {\n        _this.setState({\n          lose: false,\n          gameOver: true\n        });\n      }\n    };\n\n    _this.handleClick = function (char, e) {\n      _this.checkCharacter(char);\n    };\n\n    _this.handleReset = function () {\n      _this.setState(_objectSpread({}, _this.baseState), function () {\n        return _this.fetchWord();\n      });\n    };\n\n    _this.loading = function () {\n      return React.createElement(\"div\", {\n        className: \"game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"game-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Loading..\"), \")\"));\n    };\n\n    _this.state = {\n      currentWord: \"\",\n      loading: true,\n      guessed: [],\n      correctlyGuessed: [],\n      numberOfGuesses: 6,\n      gameOver: false\n    };\n    _this.characters = \"abcdefghijklmnopqrstuvwxyz12367890\";\n    _this.baseState = _this.state;\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchWord();\n    }\n  }, {\n    key: \"showRest\",\n    value: function showRest() {\n      var _this2 = this;\n\n      var missedLetterList = _toConsumableArray(this.state.currentWord).filter(function (char) {\n        return !_this2.state.correctlyGuessed.includes(char);\n      });\n\n      this.setState({\n        missedLetters: missedLetterList.join('')\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.loading) {\n        return this.loading();\n      } else if (this.state.gameOver) {\n        return React.createElement(\"div\", {\n          className: \"game\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"game-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, \"The game is over\"), React.createElement(Winner, {\n          gameResult: this.state.lose,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          onClick: this.handleReset,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, \"Play Again?\")));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"game\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"game-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"game-info\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, \"Remaining Turns:\", this.state.numberOfGuesses), React.createElement(Hangman, {\n          gameTurn: this.state.numberOfGuesses,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        })), React.createElement(GameConsole, {\n          currentWord: this.state.currentWord,\n          correctlyGuessed: this.state.correctlyGuessed,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }), React.createElement(Keyboard, {\n          guesses: this.state.guessed,\n          onClick: this.handleClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        })));\n      }\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/bhavikpatel/Programming/GitHub/randomRepos/Reach/bhavik_hangman/client/src/containers/game.js"],"names":["React","Component","axios","Keyboard","Hangman","Winner","GameConsole","url","path","param","Game","props","fetchWord","get","then","response","data","split","allWords","word","Math","floor","length","random","setState","currentWord","loading","checkCharacter","char","state","guessed","indexOf","prevState","concat","includes","correctlyGuessed","checkGameStatus","numberOfGuesses","gameOver","characterList","filter","value","index","self","undefined","sort","toString","result","lose","showRest","handleClick","e","handleReset","baseState","characters","missedLetterList","missedLetters","join"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios'\nimport Keyboard from '../components/keyboard'\nimport Hangman from '../components/hangman'\nimport Winner from '../components/winner'\nimport GameConsole from '../components/gameConsole'\nimport './game.css'\n\nconst url = 'http://app.linkedin-reach.io/words'\nconst path = '/api/words'\nconst param = '?difficulty=1'\n\nclass Game extends Component {       \n    constructor(props){\n        super(props)\n        this.state = {\n            currentWord: \"\",\n            loading: true,\n            guessed: [],\n            correctlyGuessed: [],\n            numberOfGuesses: 6,\n            gameOver: false\n        }\n        this.characters = \"abcdefghijklmnopqrstuvwxyz12367890\";\n        this.baseState = this.state;\n    }\n\n    fetchWord = () => {\n        axios.get('/api/words' + param)\n        .then(response => {\n          return response.data.split(\"\\n\")\n        })\n        .then(allWords => {\n          const word = allWords[Math.floor(allWords.length * Math.random())]\n          return word\n        })\n        .then((word) => {\n            this.setState({\n                currentWord: word,\n                loading: false\n            })\n        })\n    }\n\n    componentDidMount(){\n        this.fetchWord();\n    }\n\n    checkCharacter = (char) => {\n        if (this.state.guessed.indexOf(char) === -1){\n            this.setState((prevState) => {\n                return {\n                    guessed: prevState.guessed.concat(char)\n                }\n            })\n        }\n        if (this.state.currentWord.includes(char)){\n             this.setState(prevState => ({correctlyGuessed: prevState.correctlyGuessed.concat(char)}\n                ),() => this.checkGameStatus())\n        } else {\n            this.setState((prevState) => {\n                return {\n                    numberOfGuesses: prevState.numberOfGuesses - 1,\n                }\n            }, ()=>this.checkGameStatus())\n        }\n    }\n\n    checkGameStatus = () => {\n        if(this.state.numberOfGuesses === 0) {\n            this.gameOver('lose');\n        }\n        var characterList = [...this.state.currentWord]\n            .filter((value, index, self) => {\n                return self.indexOf(value) === index;\n            });\n        if (characterList !== undefined){\n            return (characterList.sort().toString() === this.state.correctlyGuessed.sort().toString() ? this.gameOver('win') : null);\n        } else {\n            return null;\n        }\n    }\n\n    gameOver = (result) => {\n        if (result === 'lose') {\n          this.setState({\n            lose: true,\n            gameOver: true\n          });\n          this.showRest();\n        } else {\n          this.setState({\n            lose: false,\n            gameOver: true\n          });\n        }\n    };\n\n    showRest() {\n        const missedLetterList = [...this.state.currentWord]\n          .filter(char => !this.state.correctlyGuessed.includes(char));\n        this.setState({\n          missedLetters: missedLetterList.join(''),\n        });\n      }\n\n    handleClick = (char, e) => {\n        this.checkCharacter(char);\n    }\n\n    handleReset = () => {\n        this.setState({...this.baseState}, () => this.fetchWord());\n    }\n\n    loading = () => {\n        return (\n            <div className=\"game\">\n                <div className=\"game-wrapper\">\n                    <h1>Loading..</h1>)\n                </div>\n            </div>\n        )\n    }   \n\n    render(){\n        if (this.state.loading){\n            return this.loading()\n        } else if (this.state.gameOver){\n            return (\n                <div className=\"game\">\n                    <div className=\"game-wrapper\">\n                        <div>The game is over</div>\n                        <Winner\n                            gameResult={this.state.lose}\n                        />\n                        <button onClick={this.handleReset}>Play Again?</button>\n                    </div>\n                </div>\n            )\n        } else { \n            return (\n                <div className=\"game\">\n                    <div className=\"game-wrapper\">\n                        <div className=\"game-info\">\n                            <h2>Remaining Turns:{this.state.numberOfGuesses}</h2>\n                            <Hangman\n                                gameTurn={this.state.numberOfGuesses}\n                            />\n                        </div>\n                        <GameConsole \n                            currentWord={this.state.currentWord}\n                            correctlyGuessed={this.state.correctlyGuessed}\n                        />\n                        <Keyboard\n                            guesses={this.state.guessed}\n                            onClick={this.handleClick}\n                        />\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n  \nexport default Game"]},"metadata":{},"sourceType":"module"}