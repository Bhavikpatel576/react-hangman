{"version":3,"sources":["actions/game.js","containers/game.js","components/App.js","containers/list.js","reducers/game.js","reducers/index.js","store/configureStore.js","serviceWorker.js","index.js"],"names":["START_GAME","Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentWord","_this2","fetch","method","headers","Content-Type","Accept","then","res","data","console","log","json","list","setState","react_default","a","createElement","Component","App","handleGamePlay","startGame","game","connect","store","gameNumber","dispatch","text","type","initialState","turn","playerName","correctGuesses","incorrectGuesses","word","loading","arguments","length","undefined","action","objectSpread","combineReducers","configureStore","preloadedState","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","compose","applyMiddleware","thunk","createLogger","Boolean","location","hostname","match","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mNAAMA,UAAa,cCEnB,IAuCeC,cAlCX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,YAAa,IAHHR,mFAOC,IAAAS,EAAAN,KACnBO,MAZS,aAYG,CACRC,OAAQ,MACRC,QAAU,CACNC,eAAgB,mBAChBC,OAAU,sBAGjBC,KAAK,SAACC,GACHA,EAAID,KAAK,SAACE,GACNC,QAAQC,IAAIF,GACZA,EAAKG,WAGZL,KAAK,SAAAM,GAAI,OAAIZ,EAAKa,SAAS,CAAED,4CAI1B,OACIE,EAAAC,EAAAC,cAAA,iCA3BOC,aCEbC,GCNaD,wBDUf,SAAAC,EAAY5B,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,IACd3B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0B,GAAArB,KAAAH,KAAMJ,KAGV6B,eAAiB,WACb5B,EAAKD,MAAM8B,UAAU,UALP7B,wEASd,OACIuB,EAAAC,EAAAC,cAAA,WAIIF,EAAAC,EAAAC,cAACK,EAAD,cAlBEJ,cAgCHK,cARS,SAAAC,GAAK,MAAK,CAC9BC,WAAYD,EAAMC,aAGK,SAACC,GAAD,MAAe,CACtCL,UAAW,SAACM,GAAUD,EFnCnB,SAAmBC,GACtB,MAAO,CAAEC,KAAMvC,EAAYsC,QEkCIN,CAAUM,OAG9BJ,CAA4CJ,sCExCrD9B,EAAa,aAEbwC,EAAe,CACjBC,KAAM,EACNC,WAAY,GACZN,WAAY,EACZO,eAAgB,GAChBC,iBAAkB,GAClBC,KAAM,GACNC,SAAS,GAgBEb,MAZf,WAA2C,IAA7BvB,EAA6BqC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAArBP,EAAcU,EAAOH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACvC,OAAQC,EAAOX,MACX,KAAKvC,EACD,OAAOI,OAAA+C,EAAA,EAAA/C,CAAA,GAAIM,EAAX,CACI0B,WAAY1B,EAAM0B,WAAa,EAC/BM,WAAYQ,EAAOZ,OAE3B,QACI,OAAO5B,IClBJ0C,cAAgB,CAC3BnB,SCcWoB,EAbQ,SAAAC,GAUrB,OATcC,YACZC,EACAC,OAAOC,8BAAgCD,OAAOC,+BAC9CJ,EACAK,YACEC,YAAgBC,IAAOC,6BCCTC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCVN,IAAM/B,EAAQkB,IAEdc,iBACIzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAUjC,MAAOA,GACbT,EAAAC,EAAAC,cAACyC,EAAD,OAEJC,SAASC,eAAe,SDmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,KAAK,SAAAyD,GACjCA,EAAaC","file":"static/js/main.782a70a2.chunk.js","sourcesContent":["const START_GAME = \"START_GAME\";\n\nexport function startGame(text) {\n    return { type: START_GAME, text }\n}","import React, {Component} from 'react';\n\nconst url = 'http://app.linkedin-reach.io/words'\nconst path = '/api/words'\nconst param = '?difficulty='\n\nclass Game extends Component {       \n    constructor(props){\n        super(props)\n        this.state = {\n            currentWord: \"\"\n        }\n    }\n\n    componentDidMount(){\n    fetch(path, {\n        method: 'GET',\n        headers : { \n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n            }\n        })\n    .then((res) => {\n        res.then((data) => {\n            console.log(data);\n            data.json()\n        })\n    })\n    .then(list => this.setState({ list }))\n    }\n\n    render(){\n        return (\n            <div>\n                Game render\n            </div>\n        )\n    }\n}\n\n\nexport default Game;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Welcome } from '../containers/welcome';\nimport {startGame} from '../actions/game';\nimport Game from '../containers/game';\nimport List from '../containers/list';\n\nclass App extends Component {\n    static propTypes = {\n        \n      }\n    constructor(props){\n        super(props)\n    }\n\n    handleGamePlay = () => {\n        this.props.startGame(\"Guest\")\n    }\n\n    render(){\n        return (\n            <div>\n                {/* <Welcome \n                    startGame={this.handleGamePlay}\n                /> */}\n                <Game/>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = store => ({\n    gameNumber: store.gameNumber,\n})\n  \nconst mapDispatchToProps = (dispatch) => ({\n    startGame: (text) => {dispatch(startGame(text))}\n})\n  \nexport default connect(mapStateToProps,mapDispatchToProps)(App)","import React, { Component } from 'react';\n\nclass List extends Component {\n  // Initialize the state\n  constructor(props){\n    super(props);\n    this.state = {\n      list: []\n    }\n  }\n\n  // Fetch the list on first mount\n  componentDidMount() {\n    this.getList();\n  }\n\n  // Retrieves the list of items from the Express app\n  getList = () => {\n    fetch('/api/getList')\n    .then(res => res.json())\n    .then(list => this.setState({ list }))\n  }\n\n  render() {\n    const { list } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>List of Items</h1>\n        {/* Check to see if any items are found*/}\n        {list.length ? (\n          <div>\n            {/* Render the list of items */}\n            {list.map((item) => {\n              return(\n                <div>\n                  {item}\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          <div>\n            <h2>No List Items Found</h2>\n          </div>\n        )\n      }\n      </div>\n    );\n  }\n}\n\nexport default List;","const START_GAME = \"START_GAME\";\n\nconst initialState = {\n    turn: 0,\n    playerName: \"\",\n    gameNumber: 0,\n    correctGuesses: [],\n    incorrectGuesses: [],\n    word: \"\",\n    loading: false,\n}\n\n\nfunction game(state = initialState, action){\n    switch (action.type){\n        case START_GAME:\n            return {...state, \n                gameNumber: state.gameNumber + 1,\n                playerName: action.text\n            }\n        default:\n            return state\n    }\n}\n\nexport default game;\n\n","import game from './game'\nimport { combineReducers } from 'redux'\n\nexport default combineReducers({\n    game\n})\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport rootReducer from '../reducers'\n\nconst configureStore = preloadedState => {\n  const store = createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n    preloadedState,\n    compose(\n      applyMiddleware(thunk, createLogger())\n    )\n  )\n\n  return store\n}\n\nexport default configureStore\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {render} from 'react-dom';\nimport {Provider} from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport configureStore from './store/configureStore';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}